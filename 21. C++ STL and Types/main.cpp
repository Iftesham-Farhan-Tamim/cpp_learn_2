// // Set

// // Inserting elements into a set

#include<bits/stdc++.h>
using namespace std;

int main() {
    set<int> set1;
    // set<int, greater<int> > set1;

    // insertion in a set
    set1.insert(3);
    set1.insert(2);
    set1.insert(1);
    set1.insert(4);
    set1.insert(5);

    cout << set1.size() << endl;

    set1.insert(3);

    cout << set1.size() << endl;
    // // size remains same because duplicate value is addes
    // // and sets contain only unique values


    // // traversing a set
    set<int>::iterator itr;
    for(itr = set1.begin(); itr!=set1.end(); itr++) {
        cout << *itr << " ";
    }
    cout << endl;

    for(auto value:set1) {
        cout << value << " ";
    }
    cout << endl;

    // // deletion of elements
    set1.erase(4);

    for(auto value:set1) {
        cout << value << " ";
    }
    cout << endl;
}

// output:
// 5
// 5
// set<int> set1; --> 1 2 3 4 5
// set<int, greater<int> > set1; --> 5 4 3 2 1
// 1 2 3 4 5 
// 1 2 3 5 
// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................

// ............................................................................................
