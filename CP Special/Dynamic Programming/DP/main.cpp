// // Print the n-th fibonacci number

// #include <bits/stdc++.h>
// using namespace std;

// int fib(int n) {

// 	// base case
// 	if (n == 0 || n == 1) return n;

// 	// recursive work
// 	return fib(n - 1) + fib(n - 2);
// }

// int main() {

// 	int n;
// 	cin >> n;

// 	cout << fib(n) << endl;
// }

// input:
// 8

// output:
// 21
// ............................................................................................
// // --> Top Down (Memoization)

// #include <bits/stdc++.h>
// using namespace std;

// int fib(int n, vector<int>&dp) {

// 	// base case
// 	if (n == 0 || n == 1) return n;

// 	// check if already present
// 	if (dp[n] != -1) {
// 		return dp[n];
// 	}

// 	// recursive case
// 	return dp[n] = fib(n - 1, dp) + fib(n - 2, dp);
// }

// int main() {
// 	int n;
// 	cin >> n;

// 	vector<int>dp(n + 1, -1);
// 	cout << fib(n, dp) << endl; 
// }

// input:
// 8

// output:
// 21
// ............................................................................................
// // --> Botttom Up (Tabulation)

// #include <bits/stdc++.h>
// using namespace std;

// int fib(int n, vector<int>&dp) {

//     // base case
//     if(n == 0 || n == 1) return n;

//     dp[0] = 0;
//     dp[1] = 1;

//     for(int i = 2; i <= n; i++) {
//         dp[i] = dp[i-1] + dp[i-2];
//     }

//     return dp[n];
// }

// int main() {
//     int n;
//     cin >> n;

//     vector<int> dp(n+1);
//     cout << fib(n, dp) << endl; 
// }

// input:
// 8
 
// output:
// 21
// ............................................................................................

// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................
// ............................................................................................